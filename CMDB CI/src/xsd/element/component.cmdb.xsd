<?xml version="1.0" encoding="UTF-8"?>
<!-- This file is part of Klistret. Klistret is free software: you can redistribute 
	it and/or modify it under the terms of the GNU General Public License as 
	published by the Free Software Foundation, either version 3 of the License, 
	or (at your option) any later version. Klistret is distributed in the hope 
	that it will be useful, but WITHOUT ANY WARRANTY; without even the implied 
	warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
	GNU General Public License for more details. You should have received a copy 
	of the GNU General Public License along with Klistret. If not, see <http://www.gnu.org/licenses/> -->
<xs:schema xmlns="http://www.klistret.com/cmdb/ci/element/component"
	targetNamespace="http://www.klistret.com/cmdb/ci/element/component"
	xmlns:element="http://www.klistret.com/cmdb/ci/element" xmlns:commons="http://www.klistret.com/cmdb/ci/commons"
	xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:jaxb="http://java.sun.com/xml/ns/jaxb"
	jaxb:version="2.0" jaxb:extensionBindingPrefixes="annox"
	xmlns:annox="http://annox.dev.java.net" xmlns:jxba="http://annox.dev.java.net/javax.xml.bind.annotation"
	elementFormDefault="qualified">

	<xs:import namespace="http://www.klistret.com/cmdb/ci/commons"
		schemaLocation="../commons.cmdb.xsd" />

	<xs:import namespace="http://www.klistret.com/cmdb/ci/element"
		schemaLocation="../element.cmdb.xsd" />
		
	<xs:simpleType name="Label">
		<xs:annotation>
			<xs:documentation>
				Placeholder for an alias or name defined by the organisation
			</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string" />
	</xs:simpleType>

	<!-- start of Hardware -->
	<xs:complexType name="Hardware" abstract="true">
		<xs:annotation>
			<xs:documentation></xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="element:Component"></xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:element name="Hardware" type="Hardware"></xs:element>
	<!-- end of Hardware -->



	<!-- start of Software -->
	<xs:simpleType name="Organization">
		<xs:annotation>
			<xs:documentation>
				An organization is either a company, an individual,
				or
				simply any group of people that produces a component.
			</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string" />
	</xs:simpleType>

	<xs:simpleType name="Version">
		<xs:annotation>
			<xs:documentation>
				A unique revision number or version name is
				assigned to
				each delivered unique state of a component.
			</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string" />
	</xs:simpleType>

	<xs:simpleType name="Availability">
		<xs:annotation>
			<xs:documentation>
				Organizational time frame for production
				availability (a
				specific date or quarter or period).
			</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string" />
	</xs:simpleType>

	<xs:simpleType name="Phase">
		<xs:annotation>
			<xs:documentation>
				Component life cycle phase
			</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string" />
	</xs:simpleType>

	<xs:complexType name="Software">
		<xs:annotation>
			<xs:appinfo>
				<annox:annotate>
					<jxba:XmlRootElement name="Software" />
				</annox:annotate>
			</xs:appinfo>
			<xs:documentation>The inspiration for the Software CI is the Ivy
				framework which focuses on describing software in terms of
				deliverable software. The DMTF CIM blends features and services too
				much into their definitions. The idea is the same but the terms lead
				to confusion. Software is something produced by an organization
				(content) that logically is a module (content that is mapped to the
				Name attribute) with dependencies to
				other modules and may have
				publications (artifacts).

				This CI diverges from Ivy with the
				introduction of the Phase attribute
				(which might switch names later).
				Phase tells what stage in the
				development cycle the software targets.
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="element:Component">
				<xs:sequence>
					<xs:element name="Organization" type="Organization"
						maxOccurs="1" minOccurs="1">
					</xs:element>
					<xs:element name="Version" type="Version" maxOccurs="1"
						minOccurs="1">
					</xs:element>
					<xs:element name="Availability" type="Availability"
						maxOccurs="1" minOccurs="0">
					</xs:element>
					<xs:element name="Phase" type="Phase" maxOccurs="1"
						minOccurs="0">
					</xs:element>
					<xs:element name="Label" type="Label" maxOccurs="1"
						minOccurs="0">
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:element name="Software" type="Software"></xs:element>
	<!-- end of Software -->


	<!-- start of Publication -->
	<xs:simpleType name="Type">
		<xs:annotation>
			<xs:documentation>
				Defining appropriate types for components is up to
				the
				development organization.
			</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string" />
	</xs:simpleType>
	
	<!-- start of Publication -->
	<xs:simpleType name="Extension">
		<xs:annotation>
			<xs:documentation>
				The artifact file name extension is more closely
				associated with its
				format. For example, in the case of Java archives
				the artifact type
				"jar" indicates that it is indeed a Java archive as
				per the JAR File
				specification. The file name extension happens to be
				"jar" as well.
			</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string" />
	</xs:simpleType>
	
	<xs:complexType name="Publication">
		<xs:annotation>
			<xs:appinfo>
				<annox:annotate>
					<jxba:XmlRootElement name="Publication" />
				</annox:annotate>
			</xs:appinfo>
			<xs:documentation></xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="element:Component">
				<xs:sequence>
					<xs:element name="Type" type="Type" maxOccurs="1"
						minOccurs="1">
					</xs:element>
					<xs:element name="Extension" type="Extension" maxOccurs="1"
						minOccurs="1">
					</xs:element>
					<xs:element name="Label" type="Label" maxOccurs="1"
						minOccurs="0">
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:element name="Publication" type="Publication"></xs:element>
	<!-- end of Publication -->
</xs:schema>