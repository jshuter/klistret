<?xml version="1.0" encoding="UTF-8"?>
<!--
	This file is part of Klistret. Klistret is free software: you can
	redistribute it and/or modify it under the terms of the GNU General
	Public License as published by the Free Software Foundation, either
	version 3 of the License, or (at your option) any later version.
	
	Klistret is distributed in the hope that it will be useful, but
	WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
	General Public License for more details. You should have received a
	copy of the GNU General Public License along with Klistret. If not,
	see <http://www.gnu.org/licenses/>
-->
<xs:schema xmlns="http://www.klistret.com/cmdb/ci/pojo"
	targetNamespace="http://www.klistret.com/cmdb/ci/pojo"
	xmlns:commons="http://www.klistret.com/cmdb/ci/commons"
	xmlns:xs="http://www.w3.org/2001/XMLSchema"
	elementFormDefault="qualified"
	xmlns:jaxb="http://java.sun.com/xml/ns/jaxb"
	xmlns:codeInjector="http://jaxb.dev.java.net/plugin/code-injector"
	xmlns:ci="http://www.klistret.com/xjc/plugin/ci" jaxb:version="2.0"
	jaxb:extensionBindingPrefixes="codeInjector ci">
	<xs:import namespace="http://www.klistret.com/cmdb/ci/commons"
		schemaLocation="commons.cmdb.xsd" />
	<xs:simpleType name="id">
		<xs:annotation>
			<xs:documentation>
				Unique identification (mapping to generic id)
			</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:long" />
	</xs:simpleType>
	<xs:simpleType name="name">
		<xs:annotation>
			<xs:documentation>Object name</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string" />
	</xs:simpleType>
	<xs:simpleType name="fromTimeStamp">
		<xs:annotation>
			<xs:documentation>
				Time stamp denoting from when the object is active
			</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:dateTime" />
	</xs:simpleType>
	<xs:simpleType name="toTimeStamp">
		<xs:annotation>
			<xs:documentation>
				Time stamp denoting how long the object is active
			</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:dateTime" />
	</xs:simpleType>
	<xs:simpleType name="createId">
		<xs:annotation>
			<xs:documentation>Creation ID</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string" />
	</xs:simpleType>
	<xs:simpleType name="createTimeStamp">
		<xs:annotation>
			<xs:documentation>
				Time stamp when the object was created
			</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:dateTime" />
	</xs:simpleType>
	<xs:simpleType name="updateTimeStamp">
		<xs:annotation>
			<xs:documentation>
				Time stamp when the object was last updated
			</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:dateTime" />
	</xs:simpleType>
	<xs:complexType name="Base" abstract="true">
		<xs:sequence>
			<xs:element name="id" type="id" maxOccurs="1" minOccurs="1" />
			<xs:element name="name" type="name" maxOccurs="1"
				minOccurs="1" />
			<xs:element name="fromTimeStamp" type="fromTimeStamp"
				maxOccurs="1" minOccurs="1" />
			<xs:element name="toTimeStamp" type="toTimeStamp"
				maxOccurs="1" minOccurs="0" />
			<xs:element name="createId" type="createId" maxOccurs="1"
				minOccurs="0" />
			<xs:element name="createTimeStamp" type="createTimeStamp"
				maxOccurs="1" minOccurs="1" />
			<xs:element name="updateTimeStamp" type="updateTimeStamp"
				maxOccurs="1" minOccurs="1" />
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="Element">
		<xs:annotation>
			<xs:appinfo>
				<codeInjector:code><![CDATA[
					public boolean equals(Object other) { 
						if (this == other)
							return true;
						
						if (this.id == null)
							return false;
							
						if (!(other instanceof Element))
							return false;
						
						final Element that = (Element) other;
						
						return this.id.equals(that.getId());
					}
					
					public int hashCode() {
        				if (id != null) {
            				return id.hashCode();
        				} else {
            				return super.hashCode();
        				}
    				}
					]]>
				</codeInjector:code>
				<ci:Proxy />
			</xs:appinfo>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="Base">
				<xs:sequence>
					<xs:element name="type" type="ElementType"
						maxOccurs="1" minOccurs="1" />
					<xs:element name="configuration"
						type="commons:Element" maxOccurs="1" minOccurs="1" />
					<xs:element name="sourceRelations" type="Relation"
						maxOccurs="unbounded" minOccurs="0" />
					<xs:element name="destinationRelations"
						type="Relation" maxOccurs="unbounded" minOccurs="0" />
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="Relation">
		<xs:annotation>
			<xs:appinfo>
				<codeInjector:code><![CDATA[
					public boolean equals(Object other) { 
						if (this == other)
							return true;
						
						if (this.id == null)
							return false;
							
						if (!(other instanceof Relation))
							return false;
						
						final Relation that = (Relation) other;
						
						return this.id.equals(that.getId());
					}
					
					public int hashCode() {
        				if (id != null) {
            				return id.hashCode();
        				} else {
            				return super.hashCode();
        				}
    				}
					]]>
				</codeInjector:code>
				<ci:Proxy />
			</xs:appinfo>
		</xs:annotation>

		<xs:complexContent>
			<xs:extension base="Base">
				<xs:sequence>
					<xs:element name="type" type="RelationType"
						maxOccurs="1" minOccurs="1" />
					<xs:element name="source" type="Element"
						maxOccurs="1" minOccurs="1" />
					<xs:element name="destination" type="Element"
						maxOccurs="1" minOccurs="1" />
					<xs:element name="configuration"
						type="commons:Relation" maxOccurs="1" minOccurs="1" />
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="ElementType">
		<xs:annotation>
			<xs:appinfo>
				<codeInjector:code><![CDATA[
					public boolean equals(Object other) { 
						if (this == other)
							return true;
						
						if (this.id == null)
							return false;
							
						if (!(other instanceof ElementType))
							return false;
						
						final ElementType that = (ElementType) other;
						
						return this.id.equals(that.getId());
					}
					
					public int hashCode() {
        				if (id != null) {
            				return id.hashCode();
        				} else {
            				return super.hashCode();
        				}
    				}
					]]>
				</codeInjector:code>
			</xs:appinfo>
		</xs:annotation>

		<xs:complexContent>
			<xs:extension base="Base"></xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="RelationType">
		<xs:annotation>
			<xs:appinfo>
				<codeInjector:code><![CDATA[
					public boolean equals(Object other) { 
						if (this == other)
							return true;
						
						if (this.id == null)
							return false;
							
						if (!(other instanceof RelationType))
							return false;
						
						final RelationType that = (RelationType) other;
						
						return this.id.equals(that.getId());
					}
					
					public int hashCode() {
        				if (id != null) {
            				return id.hashCode();
        				} else {
            				return super.hashCode();
        				}
    				}
					]]>
				</codeInjector:code>
			</xs:appinfo>
		</xs:annotation>

		<xs:complexContent>
			<xs:extension base="Base"></xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:complexType name="QueryResponse">
		<xs:annotation>
			<xs:appinfo>
				<ci:Proxy />
			</xs:appinfo>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="successful" type="xs:boolean"
				maxOccurs="1" minOccurs="1" />
			<xs:element name="count" type="xs:int" maxOccurs="1"
				minOccurs="1" />
			<xs:element name="message" type="xs:string" maxOccurs="1"
				minOccurs="1" />
			<xs:choice maxOccurs="1">
				<xs:element name="elements" type="Element"
					maxOccurs="unbounded" minOccurs="0" />
				<xs:element name="relations" type="Relation"
					maxOccurs="unbounded" minOccurs="0" />
			</xs:choice>
		</xs:sequence>
	</xs:complexType>

</xs:schema>