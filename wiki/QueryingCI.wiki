The core module exposes querying mechanism made up of XPath filters.

== Description ==
The DMTF group has a [http://www.dmtf.org/standards/cmdbf CMDBf specification] that predicates to major services.  One for querying from CMDBs and the other for registration of CIs.  Querying according to DMTF should:
  _...select and return items, relationships, or graphs containing items and relationships, and the data records associated with each item and relationship_

The 1.1 specification goes on to break down how querying ought to be implemented.  Unfortunately, the query interface keys off how records are stored (i.e. all of the constraint variations).  Klistret takes a different approach by only using XPath expression (close to the _xpathConstrain_ CMDBf syntax) as filters.  Only a fraction of the [http://www.w3.org/TR/xpath20/ XPath 2.0] functions and expression (here expressions means a Comparison expression or Step expression assuming a decent level of familiarity with XPath).  These limitations described below are done in consideration to perform and directly related to what databases are supported (currently DB2, Oracle, and Postgresql).

Future versions of Klistret may support the CMDBf Query syntax.

== XPath 2.0 Support ==
XPath expressions are explained by the [http://saxonica.com/welcome/welcome.xml Saxon framework].  Saxon as of 9.3 swallows almost everything in XQuery 3.0 and is an amazing open-source project.  Parsing a single XPath expression into a hierarchy of it's basic expressions is no easy task.  Saxon does this quick and reliable.  Klistret piggybacks onto Saxon by putting an path expression (which may only flow forward) into a series of steps with restrictions on the construction of step predicates.  In other words, only XPath 2.0 *relative* path expressions are allowed and each axis moves forward one step.  A step may have one or more predicates (what is enclosed in square brackets).  Steps traverse the XMl document while predicates restrict like the where clause in SQL.