The entire Software structure in Klistret is taken from the [http://ant.apache.org/ivy/ Ivy] framework.  It is only natural to be able to register Software and Publication CIs plus their relationships via an extension to Klistret (part of the Blueprints project).

== Description ==
Ivy modules, publications, and dependencies map without deviation to [SoftwareCI Software CIs], [PublicationCI Publication CIs] och Dependency CIs i Klistret.  However, Klistret does not work like package repository rather repositories (like [http://www.ibiblio.org/ Ibiblio]) actually manage artifacts (like [http://archiva.apache.org/ Archiva]) whereas Klistret federates a percentage of a repository's metadata.  So the complete flora of metadata latent to Ivy description files isn't fully mirrored.  Klistret harbors just enough metadata to register CIs.

A plugin for Ivy exists in the Blueprint project.  The plugin is responsible for registering an Ivy module description (i.e. XML document) and exporting out software CIs as an Ivy description file.  The plugin is very basic.  It relies almost to 100 percent on the user feeding the correct information.  The process of registering Ivy module description should not be confused with Ivy publishing or resolving.

=== Mapping ===
This section maps sections of the Ivy module description to CI properties.  Ivy attributes that are not noted are not handled by the Ivy plugin.  The _branch_ attribute is part of the _info_ section but not listed below which means it is not mapped by the Ivy plugin.

==== Software ====
The Softare CI is based solely on the metadata located in the _info_ section of the Ivy module descriptor.
|| *Section* || *Attribute* || *Klistret* || *Required* || *Description* ||
|| info || organisation || Organisation || Yes || Direct transfer from Ivy's organisation attribute into the organisation property for Software ||
|| info || module || Name || Yes || The module is the Software and thus the module attribute becomes the _Name_ property for both the Element POJO and the commons _Name_ property part of the Base CI. ||
|| info || revision || Version || Yes || Ivy use the title _revision_ while Klistret sticks to the more common _Version_. ||
|| info || status || Phase || No || Ivy describe _status_ the way people regard a module revision.  This is close enough to the Lifecycle or _Phase_ property.  For example, the *integration* status is a revision _built by a continuous build, a nightly build_ etc.  This is the same has software stuck in the development phase.  Ivy also defines *milestones* and *releases* which are akin to test and production phases.  The actual value of _Phase_ should derive from a contextual CI.  It is something every organization should define both for their internal work and external third party software. ||
|| info || publication || Availability || No || Ivy does not require the _publication_ attribute and neither does Klistret but it may be used to specific time frames thus mapping to the _Availability_ property. ||

==== Publication ====
Publication CIs are made from the _artifact_ elements in the _publications_ section and Dependency CIs are created per artifact to the owning Software.
|| *Section* || *Attribute* || *Klistret* || *Required* || *Description* ||
|| publications.artifact || name || Name || Yes || The artifact name is the _Name_ property for the Publication Element POJO and the commons _Name_ property part of the Base CI ||
|| publications.artifact || type || Type || Yes || Types are described on the [PublicationCI Publication CI] page and these should definitely be predefined as contextual CIs. ||
|| publications.artifact || ext || Extension || Yes || Also described in detail on the [PublicationCI Publication CI] page. ||
|| publications.artifact || conf || Usage || No || The configuration construction native to Ivy is not mapped into a Klistret structure rather forced into the _Usage_ property in the Base CI in the dependency relation created between the Software from the _info_ section and the current _artifact_ in the _publications_ section. ||

==== Software Dependency ====
An Ivy dependency translates to a Dependency CI between 2 Software CI.  The _dependency_ element of the _dependencies_ section contains the criterion to locate or create a destination Software CI.
|| *Section* || *Attribute* || *Klistret* || *Required* || *Description* ||
|| dependencies.dependency || org || Organisation || Yes || Organization of the destination software. ||
|| dependencies.dependency || name || Name || Yes || Name of the destination software (Element POJO _Name_ property) ||
|| dependencies.dependency || rev || Version || Yes || Version of the destination software. Variables can even identify a version by different aspects (See below). || 
|| dependencies.dependency || conf || Usage || No || Just like the configuration _conf_ attribute for publications the _Usage_ property is utilized. ||

The [http://ant.apache.org/ivy/history/latest-milestone/ivyfile/dependency.html Ivy reference] talks about how variables can be used to locate a particular revision.  The majority of Ivy variables are supported and expect _Tag_ metadata to find a Software CI:
  * *latest.`[`any status`]`* works just like Ivy states in Klistret.  If one writes _latest.release_ then the _Tag_ _latest.phase_ must be present in Software CI and the _Phase_ property equal to _release_.  So the *lastest.integration* variable is not handled separately rather with the general management of any status name.  Klistret finds the latest version for an explicit status over all time.
  * *version ranges* are not yet supported.
  * *latest.`[`any publication`]`* is not a construct from Ivy but is interpreted by Klistret.  Publication dates are also an important aspect in Klistret and correspond to the _Availability_ property.  The variable _latest.2011-10-01_ instructs Klistret to search for a Software CI with _latest.availability_ as a _Tag_ and an _Availability_ equal to _2011-10-01_.
  * *latest.`[`any status`]`.`[`any publication`]`* is also no construction in Ivy but Klistret looks for a _Tag_ called _latest.phase.availability_ and matches against both the _Phase_ and _Availability_ properties.

Who sets all of the tags?  There are 3 different tags (_latest.phase_, _latest.availability_, and _latest.phase.availability_) that have to exist otherwise the Ivy plugin won't recognize software by variable.  Registration of software through the Ivy plugin with infilled status and publication will automatically apply Ivy tags.  If the status and publication values are not present then the software will disappear from variable specification unless the end user applies the tags manually.  Also, manual interference can by accident lead to Klistret finding multiple CI per tag which will fail inside the Ivy plugin.  So there is a good deal of responsibility on the part of the end user to preserve the integrity tagging.

== Registration ==
The Ivy module descriptor (XML document) is the information carrier to the follow REST service:
  /resteasy/ivy

The PUT HTTP method is used since an [http://en.wikipedia.org/wiki/Idempotent idempotent] action is expected.  When no Software CI exists meeting the criterion of the composite key Organization, Version, and Name then a create is issued otherwise an update.  The same applies to dependency relationships and Publication CIs.  This is important since the order in which modules are registered may be random.  Software dependencies to a module descriptor do not have to be registered to Klistret to register the module.  However, dependencies to Software are created if not found and later updated if descriptors for those dependencies are registered.

== Search ==
A HTTP GET against:
  /resteasy/ivy?start=...?limit=...?org=...&module=...&revision=...

will find (i.e. a result set) a list of Ivy module descriptors.  Both the _start_ and _limit_ query variables are optional.  The _revision_ is also optional and Klistret will retrieve descriptors without regard to version.
  