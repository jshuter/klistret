#labels Phase-Design
Configuration items (CI) are not flat objects with a bunch of properties in Klistret.  Instead, a CI is initially a XML schema and later realized as POJO classes.

== Overview ==
Most definitions of a configuration item say an entity is made up of a attributes and entities are linked together by relationships.  [http://dmtf.org/standards/cim DMTF] common information model is better since classes can have properties rather than simple attributes.  Structuring CIs as XML has advantages with inheritance and search through the XPath syntax.  This page outlines how CIs are categorized.

== Building blocks ==
John Singer does a good job of [http://www.tdan.com/view-articles/6904 grouping] CIs into major building blocks.  Singer basically buckets CIs into 3 layers: service, system, and component.  Surrounding that stack of conceptual CIs are what Singer defines as contextual CIs.  What is the difference?  Conceptual CIs are the meat-and-potatoes of the CMDB whereas contextual CI do exactly what the classification suggests by providing a context for conceptual CIs to reside.  A great example of this is the need for organizational information that usually is housed in other management tools.  People and roles are useful when writing change requests but defined as full fledged entities would be overkill.  Environments are another good case where an environment definition could be either done as conceptual or contextual.  Here the deciding factor for or against a contextual representation is ease of implementation.

Singer packed in ITIL processes under the contextual umbrella.  ITIL processes are change requests, incidents, problems plus other tasks that typically result in an effect against an CMDB entity.  Contextual entities in Klistret act more like views to segregate conceptual entities from one another.  Processes imply an action that changes conceptual as well contextual entities.  Klistret elevates processes to the same logical level as contextual and conceptual entities. 

== Conceptual ==
Again conceptual entities are conglomeration of services, systems, and components.  Together these entities describe what functionality an organization offers in a runtime landscape configured out of a flora of hardware and software deliverables.

=== Service ===
An organization supplies functionality to users or other systems as services.  Another way to express services is that they are logical end-points for what should be done by the underlying computer system.  Services 

=== System ===

=== Component ===

== Contextual ==

== Process ==