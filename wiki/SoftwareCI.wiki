Software is a central player for inventory both for what an organization consumes from other organizations och what produces itself.

== Description ==
Components are inventory.  Software being a component derivative is also inventory.  To limit confusion it is important that the initial definition 
of software keeps itself inside the conceptual boundaries of inventory.  The [http://www.dmtf.org/standards/cim DMTF CIM] has no obvious schema for software despite it being the first thing organizations either produce or allocate.  The [http://www.wbemsolutions.com/tutorials/CIM/cim-model-app.html DMTF Application] encapsulates the general concepts of software by looking at it from the angle of systems that need features and functionality.  All of sudden the basic need for modeling inventory explodes into a bear hug around services and systems.  [http://ant.apache.org/ivy Ivy] (similarly Maven underneath the monolith of project theory) has a simpler approach.  There is nothing within the Ivy documentation which compares Ivy as a dependency manager and modelling software as a CI.  However, Ivy like Maven unknowingly is a modern representation of software as inventory.

Ivy talks about modules rather than using the word _software_.  Software is more inline with CMDB terminology.  Modules and software are logically equivalent.  Regardless if software is open source or commercial there is an organization which produces the software.  The identification of software as a module normally consists of an organization, a module name, a version and potentially an organizational type.

Modules are stuff that is deliverable.  Modules can have intertwined dependencies to each other.  Ivy terms modules as _reusable unit of software_ that _follows a revision control scheme_.  There is no talk about packaging software according to function.  The birth and growth of modules depends more on how the software is developed not how it is used.  This is why a module is not the actual object being delivered rather a logical container that may house no so called artifacts (later called publications) but only dependencies to other modules or many artifacts with no dependencies.  There is enormous flexibility.  It is possible to define an application software (take Microsoft Office) as a module with artifacts just dependencies (to Microsoft Word or Powerpoint ).

Ivy doesn't ignore totally how software is used.  The whole concept of module configurations is paramount when testing software or running it in a development container or packaging it for production.  Module configurations live in the definition of dependencies and in Klistret inside relations.  Configurations aid in filtering module hierarchies often during the installation and configuration of software in a targeted system. 

=== Specific ===
So how do modules as software get defined in Klistert?

|| *Property* || *Description* || *Required* || *Unbounded* || *Key* || *Context* ||
|| Organization || There is always a producer behind software.  This property stores the name of the organization.  An organization hierarchy is flattened into usually a dot delimited namespace (ex. the Resteasy project at JBoss is named _org.jboss.resteasy_).  The property (element) is part of the _http://www.klistret.com/cmdb/ci/element/component_ namespace. || Yes || No || Yes || Yes ||
|| Version || A version identifier often is an increasing series that denotes a snapshot of the software primarily by time aspects.  The property (element) is part of the _http://www.klistret.com/cmdb/ci/element/component_ namespace. || Yes || No || Yes || No ||
|| Availability || The version property places the software in an ordered context thereby indirectly a time frame the availability property directly specifics a specific time frame.  The property (element) is part of the _http://www.klistret.com/cmdb/ci/element/component_ namespace.  The natural weak association to meta data is the contextual TimeFrame CI. || No || No || No || Like ||
|| Phase || Phase is similar to the contextual Lifecycle CI representing [http://en.wikipedia.org/wiki/Software_development_process software lifecycles] (requirements, design, so forth). || No || Yes || No || Like ||

== Usage ==

== Relations ==

== Blueprint ==