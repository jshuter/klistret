<?xml version="1.0" encoding="UTF-8"?>
<!-- This file is part of Klistret. Klistret is free software: you can redistribute 
	it and/or modify it under the terms of the GNU General Public License as 
	published by the Free Software Foundation, either version 3 of the License, 
	or (at your option) any later version. Klistret is distributed in the hope 
	that it will be useful, but WITHOUT ANY WARRANTY; without even the implied 
	warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
	GNU General Public License for more details. You should have received a copy 
	of the GNU General Public License along with Klistret. If not, see <http://www.gnu.org/licenses/> -->
<xs:schema xmlns="http://www.klistret.com/cmdb/ci/element"
	targetNamespace="http://www.klistret.com/cmdb/ci/element"
	xmlns:commons="http://www.klistret.com/cmdb/ci/commons" xmlns:xs="http://www.w3.org/2001/XMLSchema"
	elementFormDefault="qualified">

	<xs:import namespace="http://www.klistret.com/cmdb/ci/commons"
		schemaLocation="commons.cmdb.xsd" />

	<!-- start of Process -->
	<xs:complexType name="Process" abstract="true">
		<xs:annotation>
			<xs:documentation>
				A process is either a change, incident or problem
				against core CIs like services, systems and components.
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="commons:Element" />
		</xs:complexContent>
	</xs:complexType>

	<xs:element name="Process" type="Process"></xs:element>
	<!-- end of Process -->



	<!-- start of Context -->
	<xs:complexType name="Context" abstract="true">
		<xs:annotation>
			<xs:documentation>
				Contextual data like organizations, roles
				(requester,
				receiver, etc.), life cycles and other "positioning"
				data
				should really be external but for non-federation
				solutions this CMDB
				model includes contextual data.
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="commons:Element" />
		</xs:complexContent>
	</xs:complexType>

	<xs:element name="Context" type="Context"></xs:element>
	<!-- end of "Context" -->



	<!-- start of Component -->
	<xs:complexType name="Component" abstract="true">
		<xs:annotation>
			<xs:documentation>
				A component is physical. Good examples of
				components are
				software or hardware that are inventory. When a
				company
				buys in a PC off-line it is just a component with a
				serial
				number, capacity in terms of CPU and memory plus
				other stuff like
				network cards. It has latent functions
				but these capabilities aren't
				important until the
				component is put in a live situation and suddenly
				a
				component becomes a system (or a logical entity).
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="commons:Element" />
		</xs:complexContent>
	</xs:complexType>

	<xs:element name="Component" type="Component"></xs:element>
	<!-- end of Component -->



	<!-- start of Service -->
	<xs:complexType name="Service" abstract="true">
		<xs:annotation>
			<xs:documentation>
				Services are basically a contract (interface)
				between a
				provider and a consumer. The actually implementation is
				buried in software components and available through
				system
				applications. Services are unique or immutable.
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="commons:Element" />
		</xs:complexContent>
	</xs:complexType>

	<xs:element name="Service" type="Service"></xs:element>
	<!-- end of Service -->



	<!-- start of System -->
	<xs:complexType name="System" abstract="true">
		<xs:annotation>
			<xs:documentation>
				A system is a logical framework constituting a
				runtime
				made up of software or hardware components
				(http://en.wikipedia.org/wiki/System). In secular terms
				a system is
				where stuff (services) executes whereas
				components (the physical
				stuff) are inventory. For
				example, a online server provides functions
				for running
				software and is a computer system. The actual type of
				server off-line might be a Unix machine. The machine
				disjointed from
				it's runtime state is just a machine or
				component bought in buy an IT
				department.

				DMTF makes a distinction between Managed Systems and systems which at
				the moment seems unnecessary.

				Systems have states (like being offline
				or online) and
				operate within a context normally known as an
				environment (such as production or test).
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="commons:Element">
				<xs:sequence>
					<xs:element name="Environment" type="xs:string"
						maxOccurs="unbounded" minOccurs="0" />
					<xs:element name="State" type="commons:State" maxOccurs="1"
						minOccurs="1" />
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:element name="System" type="System"></xs:element>
	<!-- end of System -->
</xs:schema>