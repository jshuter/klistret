<?xml version="1.0" encoding="UTF-8"?>
<!--
	This file is part of Klistret. Klistret is free software: you can
	redistribute it and/or modify it under the terms of the GNU General
	Public License as published by the Free Software Foundation, either
	version 3 of the License, or (at your option) any later version.
	
	Klistret is distributed in the hope that it will be useful, but
	WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
	General Public License for more details. You should have received a
	copy of the GNU General Public License along with Klistret. If not,
	see <http://www.gnu.org/licenses/>
-->
<xs:schema xmlns="http://www.klistret.com/cmdb/ci/element"
	targetNamespace="http://www.klistret.com/cmdb/ci/element"
	xmlns:commons="http://www.klistret.com/cmdb/ci/commons"
	xmlns:xs="http://www.w3.org/2001/XMLSchema"
	elementFormDefault="qualified">

	<xs:import namespace="http://www.klistret.com/cmdb/ci/commons"
		schemaLocation="commons.cmdb.xsd" />

	<!-- start of Change -->
	<xs:complexType name="Origin">
		<xs:annotation>
			<xs:documentation>
				Change requests typically originate from one of five
				sources: (i) problem reports that identify bugs that
				must be fixed, which forms the most common source, (ii)
				system enhancement requests from users, (iii) events in
				the development of other systems, (iv) changes in
				underlying structure and or standards (e.g. in software
				development this could be a new operating system), and
				(v) demands from senior management.
			</xs:documentation>
		</xs:annotation>
		<xs:choice>
			<xs:element name="Name" type="xs:string">
				<xs:annotation>
					<xs:documentation>
						Origin name denoting a project or organisation.
					</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:choice>
	</xs:complexType>

	<xs:complexType name="Responsible">
		<xs:annotation>
			<xs:documentation>
				Who is responsible for the change
			</xs:documentation>
		</xs:annotation>
		<xs:choice>
			<xs:element name="Name" type="xs:string">
				<xs:annotation>
					<xs:documentation>
						Name delegating responsibility to a project or
						organisation.
					</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:choice>
	</xs:complexType>

	<xs:complexType name="Schedule">
		<xs:annotation>
			<xs:documentation>
				Important time aspects like estimated start/finish
				dates.
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="EstimatedFinish" type="xs:dateTime"
				maxOccurs="1" minOccurs="0">
			</xs:element>
			<xs:element name="EstimatedStart" type="xs:dateTime"
				maxOccurs="1" minOccurs="0">
			</xs:element>
		</xs:sequence>
	</xs:complexType>

	<xs:complexType name="Change">
		<xs:annotation>
			<xs:documentation>
				A change request is a document containing a call for an
				adjustment of a system. A change request is declarative,
				i.e. it states what needs to be accomplished, but leaves
				out how the change should be carried out.
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="commons:Element">
				<xs:sequence>
					<xs:element name="State" type="commons:State" maxOccurs="1"
						minOccurs="1">
					</xs:element>
					<xs:element name="Origin" type="Origin"
						maxOccurs="1" minOccurs="1">
					</xs:element>
					<xs:element name="Responsible" type="Responsible"
						maxOccurs="1" minOccurs="1">
					</xs:element>
					<xs:element name="Schedule" type="Schedule"
						maxOccurs="1" minOccurs="0">
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:element name="Change" type="Change"></xs:element>
	<!-- end of Change -->
	
	
	<!-- start of Component -->
	<xs:complexType name="Component" abstract="true">
		<xs:annotation>
			<xs:documentation>
				A component is physical. Good examples of components are
				software or hardware that are inventory. When a company
				buys in a PC offline it is just a component with a
				serial number, capacity in terms of CPU and memory plus
				other stuff like network cards. It has latent functions
				but these capabilities aren't important until the
				component is put in a live situation and suddenly a
				component becomes a system (or a logical entity).
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="commons:Element" />
		</xs:complexContent>
	</xs:complexType>

	<xs:element name="Component" type="Component"></xs:element>
	<!-- end of Component -->
	
	
	<!-- start of Service -->
	<xs:complexType name="Service" abstract="true">
		<xs:annotation>
			<xs:documentation>
				Services are basically a contract (interface) between a
				provider and a consumer. The actually implementation is
				buried in software components and available through
				system applications. Services are unique or immutable.
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="commons:Element" />
		</xs:complexContent>
	</xs:complexType>

	<xs:element name="Service" type="Service"></xs:element>
	<!-- end of Service -->
	
	
	<!-- start of System -->
	<xs:complexType name="System" abstract="true">
		<xs:annotation>
			<xs:documentation>
				A system is a logical framework constituting a runtime
				made up of software or hardware components
				(http://en.wikipedia.org/wiki/System). In laymans term a
				system is where stuff (services) executes whereas
				components (the physical stuff) are inventory. For
				example, a online server provides functions for running
				software and is a computer system. The actual type of
				server offline might be a Unix machine. The machine
				disjointed from it's runtime state is just a machine or
				component bought in buy an IT department.
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="commons:Element">
				<xs:sequence>
					<xs:element name="State" type="commons:State" maxOccurs="1"
						minOccurs="1" />
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:element name="System" type="System"></xs:element>
	<!-- end of System -->
</xs:schema>