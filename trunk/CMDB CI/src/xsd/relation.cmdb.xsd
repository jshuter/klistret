<?xml version="1.0" encoding="UTF-8"?>
<!-- This file is part of Klistret. Klistret is free software: you can redistribute 
	it and/or modify it under the terms of the GNU General Public License as 
	published by the Free Software Foundation, either version 3 of the License, 
	or (at your option) any later version. Klistret is distributed in the hope 
	that it will be useful, but WITHOUT ANY WARRANTY; without even the implied 
	warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
	GNU General Public License for more details. You should have received a copy 
	of the GNU General Public License along with Klistret. If not, see <http://www.gnu.org/licenses/> -->
<xs:schema xmlns="http://www.klistret.com/cmdb/ci/relation"
	targetNamespace="http://www.klistret.com/cmdb/ci/relation"
	xmlns:commons="http://www.klistret.com/cmdb/ci/commons" xmlns:xs="http://www.w3.org/2001/XMLSchema"
	xmlns:jaxb="http://java.sun.com/xml/ns/jaxb" jaxb:version="2.0"
	jaxb:extensionBindingPrefixes="annox" xmlns:annox="http://annox.dev.java.net"
	xmlns:jxba="http://annox.dev.java.net/javax.xml.bind.annotation"
	elementFormDefault="qualified">

	<xs:import namespace="http://www.klistret.com/cmdb/ci/commons"
		schemaLocation="commons.cmdb.xsd" />

	<!-- start of Aggregation -->
	<xs:complexType name="Aggregation">
		<xs:annotation>
			<xs:appinfo>
				<annox:annotate>
					<jxba:XmlRootElement name="Aggregation" />
				</annox:annotate>
			</xs:appinfo>
			<xs:documentation>
				Aggregation is a variant of the "has a" or
				association
				relationship; aggregation is more specific than
				association. It is an association that represents a
				part-whole or
				part-of relationship. As a type of
				association, an aggregation can be
				named and have the
				same adornments that an association can. However,
				an
				aggregation may not involve more than two classes.

				Aggregation can
				occur when a class is a collection or
				container of other classes, but
				where the contained
				classes do not have a strong life cycle
				dependency on
				the containerâ€”essentially, if the container is
				destroyed, its contents are not.

				Aggregation is suitable for logical
				relationships
				(construction).
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="commons:Relation"></xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:element name="Aggregation" type="Aggregation" />
	<!-- end of Aggregation -->


	<!-- start of Association -->
	<xs:complexType name="Association">
		<xs:annotation>
			<xs:appinfo>
				<annox:annotate>
					<jxba:XmlRootElement name="Association" />
				</annox:annotate>
			</xs:appinfo>
			<xs:documentation>
				Association represents the static relationship
				shared
				among the objects of two classes. Example: "department
				offers
				courses", is an association relation.
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="commons:Relation"></xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:element name="Association" type="Association" />
	<!-- end of Association -->



	<!-- start of Composition -->
	<xs:complexType name="Composition">
		<xs:annotation>
			<xs:appinfo>
				<annox:annotate>
					<jxba:XmlRootElement name="Composition" />
				</annox:annotate>
			</xs:appinfo>
			<xs:documentation>
				Composition is a stronger variant of the "owns a"
				or
				association relationship; composition is more specific
				than
				aggregation. It is represented with a solid diamond
				shape.

				Composition usually has a strong life cycle dependency
				between
				instances of the container class and instances
				of the contained
				class(es): If the container is
				destroyed, normally every instance
				that it contains is
				destroyed as well. Note that a part can (where
				allowed)
				be removed from a composite before the composite is
				deleted,
				and thus not be deleted as part of the
				composite.

				Composition is more
				geared towards physical
				relationships (construction).
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="commons:Relation"></xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:element name="Composition" type="Composition" />
	<!-- end of Composition -->



	<!-- start of Dependency -->
	<xs:complexType name="Dependency">
		<xs:annotation>
			<xs:appinfo>
				<annox:annotate>
					<jxba:XmlRootElement name="Dependency" />
				</annox:annotate>
			</xs:appinfo>
			<xs:documentation>
				Dependency is a weaker form of relationship which
				indicates that something depends on another because it
				uses it at
				some point of time.
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="commons:Relation"></xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:element name="Dependency" type="Dependency" />
	<!-- end of Dependency -->
</xs:schema>