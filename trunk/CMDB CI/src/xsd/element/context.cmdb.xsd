<?xml version="1.0" encoding="UTF-8"?>
<!--
	This file is part of Klistret. Klistret is free software: you can
	redistribute it and/or modify it under the terms of the GNU General
	Public License as published by the Free Software Foundation, either
	version 3 of the License, or (at your option) any later version.
	
	Klistret is distributed in the hope that it will be useful, but
	WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
	General Public License for more details. You should have received a
	copy of the GNU General Public License along with Klistret. If not,
	see <http://www.gnu.org/licenses/>
-->
<xs:schema xmlns="http://www.klistret.com/cmdb/ci/element/context"
	targetNamespace="http://www.klistret.com/cmdb/ci/element/context"
	xmlns:element="http://www.klistret.com/cmdb/ci/element"
	xmlns:commons="http://www.klistret.com/cmdb/ci/commons"
	xmlns:xs="http://www.w3.org/2001/XMLSchema"
	elementFormDefault="qualified">

	<xs:import namespace="http://www.klistret.com/cmdb/ci/commons"
		schemaLocation="../commons.cmdb.xsd" />

	<xs:import namespace="http://www.klistret.com/cmdb/ci/element"
		schemaLocation="../element.cmdb.xsd" />

	<!-- start of Organization -->
	<xs:complexType name="Organization">
		<xs:annotation>
			<xs:documentation>
				An organisation is either a company, an individual, or
				simply any group of people that produces software.
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="element:Context"></xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:element name="Organization" type="Organization"></xs:element>
	<!-- end of Organization -->



	<!-- start of Module -->
	<xs:complexType name="Module">
		<xs:annotation>
			<xs:documentation>
				A module is a self-contained, reusable unit of software
				that, as a whole unit, follows a revision control
				scheme.
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="element:Context"></xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:element name="Module" type="Module"></xs:element>
	<!-- end of Module -->



	<!-- start of Lifecycle -->
	<xs:complexType name="Lifecycle" abstract="true">
		<xs:annotation>
			<xs:documentation></xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="element:Context"></xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:element name="Lifecycle" type="Lifecycle"></xs:element>
	<!-- end of Lifecycle -->



	<!-- start of Timeframe -->
	<xs:complexType name="Timeframe">
		<xs:annotation>
			<xs:documentation>
				Long and short term time frames to represent
				organizational milestones.
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="element:Context" />
		</xs:complexContent>
	</xs:complexType>

	<xs:element name="Timeframe" type="Timeframe"></xs:element>
	<!-- end of Timeframe -->



	<!-- start of Environment -->
	<xs:complexType name="Environment">
		<xs:annotation>
			<xs:documentation>
				An environment could be a system related to other
				systems rather than a context for systems. ITIL is
				geared towards production and seldom encapsulates other
				environments (i.e. variations of test, higher levels of
				development, sand boxes/POC instanses or clouds). DMTF
				standards do not provide an environment CI. Systems
				always operate inside one or more contexts. A general
				nomenclature for this context is an environment.

				Environments are good candidates for aiming changes
				against. Installations processes often lack the
				granularity to direct changes to specific system and it
				is easier to formulate an RFC to act on an environment.
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="element:Context" />
		</xs:complexContent>
	</xs:complexType>

	<xs:element name="Environment" type="Environment"></xs:element>
	<!-- end of Environment -->



	<!-- start of Organization Software Type -->
	<xs:complexType name="OrganizationSoftwareType">
		<xs:annotation>
			<xs:documentation>
				An organization may denote software with a private type
				system. For example, some software may be a tar archive
				for database scripts and hence typed as DBSCRIPT.
				Currently, support only for one private type but there
				is no logical limit rather practical coding that needs
				to be redone.
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="element:Context" />
		</xs:complexContent>
	</xs:complexType>

	<xs:element name="OrganizationSoftwareType"
		type="OrganizationSoftwareType">
	</xs:element>
	<!-- end of Organization Software Type -->
</xs:schema>